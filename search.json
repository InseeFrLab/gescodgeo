[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Morin, PSAR-- INSEE. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thomas Morin, PSAR-- INSEE (2025). gescodgeo: Gestion des codes géographiques. R package version 2025.1, https://thomasmorin-insee.github.io/gescodgeo/.","code":"@Manual{,   title = {gescodgeo: Gestion des codes géographiques},   author = {{Thomas Morin, PSAR-AT - INSEE}},   year = {2025},   note = {R package version 2025.1},   url = {https://thomasmorin-insee.github.io/gescodgeo/}, }"},{"path":"/index.html","id":"gescodgeo-","dir":"","previous_headings":"","what":"Gestion des codes géographiques","title":"Gestion des codes géographiques","text":"Le package gescodgeo propose des fonctions pour la gestion des codes géographiques des communes. Ses principales utilisations sont les suivantes : apparier deux sources dont la géographie est différente, fournir des résultats avec un millésime plus récent, utiliser un zonage qui n’est pas disponible dans la géographie initiale des données. détecter la géographie des communes avant de la changer, repérer des communes mal codées. Passer des arrondissements municipaux à la commune et réciproquement pour Paris, Lyon et Marseille. Les années disponibles du code officiel géographique vont de 2008 à 2025. Voir le code officiel géographique (COG) des communes sur Insee.fr.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Gestion des codes géographiques","text":"Installer la dernière version stable depuis github :","code":"remotes::install_github(\"thomasmorin-insee/gescodgeo\")"},{"path":"/index.html","id":"exemples","dir":"","previous_headings":"","what":"Exemples","title":"Gestion des codes géographiques","text":"Un exemple de Data frame avec quelques communes Les communes sont dans le COG de l’annee 2019 Mais pas dans celui de l’annee 2021 Change l’année de la géographie Renvoie la table de passage entre 2019 et 2021 Évènements pour un code géographique donné Passe de l’arrondissement municipal à la commune Passe de la commune à l’arrondissement municipal (exemple pour un vecteur) Passe aux départements et aux régions","code":"library(gescodgeo) data <- data.frame(COM = c(\"14712\", \"53239\", \"53249\", \"53274\", \"13201\")) data |> check_cog(cog = 2019)  #> [1] TRUE data |> check_cog(cog = 2021)  #> Warning:  #> Les communes suivantes ne sont pas dans le COG de l'annee 2021 :  #> 53239 53274 #> [1] FALSE data |> change_cog(from = COM, to = \"COM_2021\", cog_from = 2019, cog_to = 2021) #>     COM COM_2021 #> 1 14712    14666 #> 2 14712    14712 #> 3 53239    53249 #> 4 53249    53249 #> 5 53274    53249 #> 6 13201    13201 cog_transition(cog_from = 2019, cog_to = 2021) |> head() #> # A tibble: 6 x 7 #>   COM_INI COM_FIN POP_INI POP_FIN NB_COM_INI NB_COM_FIN SPLIT_RATIO #>   <chr>   <chr>     <int>   <dbl>      <int>      <int>       <dbl> #> 1 14712   14666      5428    1912          1          2       0.355 #> 2 14712   14712      5428    3481          1          2       0.645 #> 3 16233   16233       451    1026          2          1       1     #> 4 16351   16233       594    1026          2          1       1     #> 5 21183   21183       896    1046          2          1       1     #> 6 21213   21452       807    2789          2          1       1 cog_events(\"14712\") #>   COG_INI COG_FIN COM_INI COM_FIN NB_COM_INI NB_COM_FIN #> 1    2016    2017   14666   14712          2          1 #> 2    2016    2017   14712   14712          2          1 #> 3    2019    2020   14712   14666          1          2 #> 4    2019    2020   14712   14712          1          2 data |> arm_to_com() #>     COM #> 1 14712 #> 2 53239 #> 3 53249 #> 4 53274 #> 5 13055 c(\"13001\", \"13055\") |> com_to_arm() #> [1] \"13001\" \"13201\" \"13202\" \"13203\" \"13204\" \"13205\" \"13206\" \"13207\" \"13208\" #> [10] \"13209\" \"13210\" \"13211\" \"13212\" \"13213\" \"13214\" \"13215\" \"13216\" data |> com_to_dep(from = COM, to = \"DEP\") |> dep_to_reg(from = DEP, to = \"REG\") #>     COM DEP REG #> 1 14712  14  28 #> 2 53239  53  52 #> 3 53249  53  52 #> 4 53274  53  52 #> 5 13201  13  93"},{"path":"/reference/adapt_to_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Modifie une data frame pour prendre en compte les changements de géographie — adapt_to_change","title":"Modifie une data frame pour prendre en compte les changements de géographie — adapt_to_change","text":"La fonction adapt_to_change() adapte une data frame aux changements de géographie, pour prendre en compte les zones qui ont fusionnées ou qui se sont scindées. Pour des fusions : réduit le nombre de lignes en supprimant les doublons, recalcule des effectifs et des moyennes, détermine des catégories majoritaires. Pour des scissions : répartit les effectifs d'un parent entre ses descendants.","code":""},{"path":"/reference/adapt_to_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modifie une data frame pour prendre en compte les changements de géographie — adapt_to_change","text":"","code":"adapt_to_change(   data,   from = NULL,   to = NULL,   sum_cols = NULL,   mean_cols = NULL,   cat_cols = NULL,   weight_from = NULL,   weight_to = NULL,   id_cols = NULL,   reduce = TRUE,   infos = FALSE )"},{"path":"/reference/adapt_to_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modifie une data frame pour prendre en compte les changements de géographie — adapt_to_change","text":"data Une data frame. <tidy-select> Colonne de la géographie initiale. Par défaut, NULL : les fusions ne sont pas traitées. <tidy-select> Colonne de la géographie finale. Par défaut, NULL : les scissions ne sont pas traitées. sum_cols <tidy-select> Colonnes des sommes à recalculer. Par défaut, NULL. mean_cols <tidy-select> Colonnes de moyennes à recalculer. Par défaut, NULL. cat_cols <tidy-select> Colonnes des catégories pour lesquelles détermine la modalité majoritaire. Par défaut, NULL. weight_from <tidy-select> Colonne pour la pondération les zones initiales, utilisée pour traiter les fusions. Par defaut, NULL : les zones ont le même poids. weight_to <tidy-select> Colonne pour la pondération les zones finales, utilisée pour traiter les scissions. Par defaut, NULL : les zones ont le même poids. id_cols <tidy-select> Colonnes identifiant de façon unique chaque observation. Pris en compte pour réduire la base (option reduce) ou recalculer les variables. Par défaut, NULL. reduce Supprimer les lignes doublons en cas de fusion de zones.  Par défaut, TRUE. infos Ajouter les  colonnes générées par la fonction pour les calculs intermédiaires. Par défaut, FALSE.","code":""},{"path":"/reference/adapt_to_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modifie une data frame pour prendre en compte les changements de géographie — adapt_to_change","text":"Une data frame avec un nombre de lignes égal ou inférieur.","code":""},{"path":"/reference/adapt_to_change.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modifie une data frame pour prendre en compte les changements de géographie — adapt_to_change","text":"Effectifs ou sommes à recalculer (paramètre sum_cols) : population, nombre de logements, d'actifs... En cas de scission, les descendants se partagent l'effectif de leur ascendant, selon leurs poids respectifs (colonne weight_to). En cas de fusion, le descendant hérite de la somme des effectifs de ses ascendants. Moyennes ou ratios recalculer (paramètre mean_cols) : salaire moyen, nombre de personnes par logement... En cas de scission, les descendants héritent de la moyenne de leur ascendant. en cas de fusion, le descendant hérite de la moyenne de ses ascendants, pondérée selon leurs poids respectifs (colonne weight_from). Catégories à recalculer (paramètre cat_cols) : En cas de fusion, le descendant hérite de la catégorie majoritaire parmi ses ascendants, compte-tenu de leurs poids respectifs (colonne weight_from) Si infos vaut TRUE, les colonnes intermédiaires suivantes, générées par la fonction adapt_to_change(), sont conservées dans la data frame  : NB_INI : Nombre d'observations initiales pour des fusions NB_FIN : Nombre d'observation finales pour des scissions RATIO_INI : Poids relatif d'une ligne parmi celles qui vont fusionner RATIo_FIN : Poids relatif d'une ligne parmi celles qui résultent d'une scisson","code":""},{"path":"/reference/adapt_to_change.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modifie une data frame pour prendre en compte les changements de géographie — adapt_to_change","text":"","code":"## Passer du departement a la region  # Superficie, population et densite par departement en Corse dep_corse <- data.frame(   DEP = c(\"2A\", \"2B\"),   REG = c(\"94\", \"94\"),   POP = c(160814, 182887),   SUP = c(4014.2  , 4665.6),   DENS = c(40.1,39.2) )  # Recalcule les variables et fusionne les lignes # La superficie (SUP) sert de ponderation pour la densite moyenne (DENS) dep_corse |> adapt_to_change(   from = DEP,   to = REG,   weight_from = SUP,   sum_cols = c(\"POP\",\"SUP\"),   mean_cols = DENS ) #> # A tibble: 1 × 5 #>   DEP   REG      POP   SUP  DENS #>   <chr> <chr>  <dbl> <dbl> <dbl> #> 1 2A    94    343701 8680.  39.6  ## Changer la geographie des communes  # Deplacements domicile-travail par commune en geographie 2023 data <- data.frame(   COM23 = c(\"08053\",\"08294\", \"60054\"),   IPONDI = c(855,57.1, 398),   DIST = c(13.4, 22.3, 31.7),   CO2_HEBDO = c(14478, 24279, 27536) )  # Changement de geographie de 2023 à 2024 data <- data |> change_cog(   from = COM23,   to = \"COM24\",   cog_from = 2023,   cog_to = 2024,   infos = TRUE )  # Remarques : # - les communes 08053 et 08294 fusionnent, la commune 60054 est scindee # - L'argument infos = TRUE permet d'obtenir la population finale (POP_FIN), #   qui servira de cle de repartition pour les communes scindees  # Recalcule les variables numeriques et fusionne les lignes data |> adapt_to_change(   from = COM23,   to = COM24,   sum_cols = c(IPONDI, CO2_HEBDO),   mean_cols = DIST,    #' Pondère les moyennes (mean_cols) pour les communes fusionees   weight_from = IPONDI,    #' Repartit les effectifs (sum_cols) pour les communes scindees   weight_to = POP_FIN ) #> # A tibble: 3 × 9 #>   COM23 COM24 IPONDI  DIST CO2_HEBDO POP_INI POP_FIN NB_COM_INI NB_COM_FIN #>   <chr> <chr>  <dbl> <dbl>     <dbl>   <dbl>   <dbl>      <int>      <int> #> 1 08053 08053   912.  14.0    38757     2405    2502          2          1 #> 2 60054 60054   152.  31.7    10506.     873     335          1          2 #> 3 60054 60694   246.  31.7    17030.     873     543          1          2  ## Changer la geographie de communes avec une variable identifiante  ## Commune 60054 par mode de trasnport (MODTRANS) data <- data.frame(   COM23 = c(\"60054\",\"60054\"),   MODTRANS = c(\"5\", \"6\"),   IPONDI = c(374, 19.6),   DIST = c(29.3, 69.1),   CO2_HEBDO = c(28999, 2491) )  # Changement de geographie de 2023 à 2024 data <- data |> change_cog(   from = COM23,   to = \"COM24\",   cog_from = 2023,   cog_to = 2024,   infos = TRUE )  # Recalcule les variables numeriques et fusionne les lignes data |> adapt_to_change(   from = COM23,   to = COM24,   sum_cols = c(IPONDI, CO2_HEBDO),   mean_cols = DIST,    #' Colonne(s) identifiante(s)   id_cols = MODTRANS,    #' Pondère les moyennes (mean_cols) pour les communes fusionées   weight_from = IPONDI,    #' Répartit les effectifs (sum_cols) pour les communes scindées   weight_to = POP_FIN ) #> # A tibble: 4 × 10 #>   COM23 COM24 MODTRANS IPONDI  DIST CO2_HEBDO POP_INI POP_FIN NB_COM_INI #>   <chr> <chr> <chr>     <dbl> <dbl>     <dbl>   <dbl>   <dbl>      <int> #> 1 60054 60054 5        143.    29.3    11065.     873     335          1 #> 2 60054 60694 5        231.    29.3    17934.     873     543          1 #> 3 60054 60054 6          7.48  69.1      950.     873     335          1 #> 4 60054 60694 6         12.1   69.1     1541.     873     543          1 #> # ℹ 1 more variable: NB_COM_FIN <int>"},{"path":"/reference/arm_to_com.html","id":null,"dir":"Reference","previous_headings":"","what":"Convertit les arrondissements municipaux en communes — arm_to_com","title":"Convertit les arrondissements municipaux en communes — arm_to_com","text":"Convertit les codes géographiques des arrondissements municipaux de Paris, Lyon et Marseille en codes de ces communes.","code":""},{"path":"/reference/arm_to_com.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convertit les arrondissements municipaux en communes — arm_to_com","text":"","code":"arm_to_com(   data,   from = NULL,   to = NULL,   extra = function(x) {      return(x)  } )"},{"path":"/reference/arm_to_com.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convertit les arrondissements municipaux en communes — arm_to_com","text":"data Un objet de type data frame ou vecteur. <tidy-select> Colonne initiale des communes ou  arrondissements municipaux. Par défaut, première colonne. Sans objet si data est un vecteur. Colonne finale pour les communes. Par défaut, même nom que la colonne initiale. Sans objet si data est un vecteur. extra Autres codes géographiques : NULL, valeur unique, vecteur nommé ou fonction. Par défaut, les codes géographiques en dehors Paris, Lyon et Marseille ne sont pas changés.","code":""},{"path":"/reference/arm_to_com.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convertit les arrondissements municipaux en communes — arm_to_com","text":"Un objet du même type que data. Pour une data frame, une data frame avec le même nombre de lignes. Pour un vecteur, un vecteur de dimension égale.","code":""},{"path":"/reference/arm_to_com.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convertit les arrondissements municipaux en communes — arm_to_com","text":"","code":"x <-  c(\"01123\",\"13201\",\"13202\",\"75101\")  # data frame data <- data.frame(ID = c(1:4), CODE_ARM = x) data |> arm_to_com(from = CODE_ARM, to = \"CODE_COM\") #>   ID CODE_ARM CODE_COM #> 1  1    01123    01123 #> 2  2    13201    13055 #> 3  3    13202    13055 #> 4  4    75101    75056  # vecteur arm_to_com(x) #> [1] \"01123\" \"13055\" \"13055\" \"75056\" arm_to_com(x, extra = NULL) #> [1] NA      \"13055\" \"13055\" \"75056\" unique(arm_to_com(x)) #> [1] \"01123\" \"13055\" \"75056\""},{"path":"/reference/change_cog.html","id":null,"dir":"Reference","previous_headings":"","what":"Change l'année du code officiel géographique des communes — change_cog","title":"Change l'année du code officiel géographique des communes — change_cog","text":"Convertit les codes géographiques des communes dans une autre année du code officiel géographique (COG). Les années vont de 2008 au dernier millésime disponible.","code":""},{"path":"/reference/change_cog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change l'année du code officiel géographique des communes — change_cog","text":"","code":"change_cog(   data,   cog_from,   cog_to,   from = NULL,   to = NULL,   infos = FALSE,   split_ratio = FALSE,   one_to_one = FALSE )"},{"path":"/reference/change_cog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change l'année du code officiel géographique des communes — change_cog","text":"data Un objet de type data frame ou vecteur. cog_from Année initiale du code officiel géographique, à partir de 2008. cog_to Année finale du code officiel géographique, à partir de 2008. <tidy-select> Colonne initiale des communes. Par défaut, première colonne. Sans objet si data est un vecteur. Colonne finale pour les communes. Par défaut, même nom que la colonne initiale. Sans objet si data est un vecteur. infos Ajouter les informations de la table de passage. Par défaut, FALSE. Sans objet si data est un vecteur. split_ratio Ajouter une clé de répartition pour la réaffectation des effectifs quand des communes sont scindées. Par défaut, FALSE. Sans objet si data est un vecteur. one_to_one Ne garder qu'une seule commmune en cas de scission. Le code est celui de la commune initiale s'il est présent dans l'une des communes issues de la scission, sinon il correspond à celui de la commune fille qui est la plus peuplée. Cette option permet d'éviter que des lignes soient dupliquées en cas de scission. Par défaut, FALSE.","code":""},{"path":"/reference/change_cog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change l'année du code officiel géographique des communes — change_cog","text":"Un objet du même type que data. Pour une data frame, une data frame avec un nombre de lignes égal ou supérieur. Le nombre de ligne est toujours égal si one_to_one = TRUE. Pour un vecteur, un vecteur de dimension égale ou supérieure. La dimension est toujours égale si one_to_one = TRUE.","code":""},{"path":"/reference/change_cog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change l'année du code officiel géographique des communes — change_cog","text":"","code":"# Un exemple de data frame avec quelques communes data <- data.frame(COM=c(\"14712\", \"16233\", \"16351\", \"53239\", \"53249\", \"53274\"))  # Change l'annee du code officiel geographique des communes data |> change_cog(from = \"COM\", cog_from = 2019, cog_to = 2021) #>     COM #> 1 14666 #> 2 14712 #> 3 16233 #> 4 16233 #> 5 53249 #> 6 53249 #> 7 53249  # Variante : ne retient qu'une commune apres scission data |> change_cog(   from = \"COM\",   to = \"COM_21\",   cog_from = 2019,   cog_to = 2021,   one_to_one = TRUE ) #>     COM COM_21 #> 1 14712  14712 #> 2 16233  16233 #> 3 16351  16233 #> 4 53239  53249 #> 5 53249  53249 #> 6 53274  53249  # Informations de la table de passage data |> change_cog(   from = \"COM\",   to = \"COM_21\",   cog_from = 2019,   cog_to = 2021,   infos = TRUE ) #>     COM COM_21 POP_INI POP_FIN NB_COM_INI NB_COM_FIN #> 1 14712  14666    5428    1912          1          2 #> 2 14712  14712    5428    3481          1          2 #> 3 16233  16233     451    1026          2          1 #> 4 16351  16233     594    1026          2          1 #> 5 53239  53249     421    1121          3          1 #> 6 53249  53249     463    1121          3          1 #> 7 53274  53249     237    1121          3          1  # Cle de repartition pour les scissions data |> change_cog(   from = \"COM\",   to = \"COM_21\",   cog_from = 2019,   cog_to = 2021,   split_ratio = TRUE ) #>     COM COM_21 SPLIT_RATIO #> 1 14712  14666   0.3545337 #> 2 14712  14712   0.6454663 #> 3 16233  16233   1.0000000 #> 4 16351  16233   1.0000000 #> 5 53239  53249   1.0000000 #> 6 53249  53249   1.0000000 #> 7 53274  53249   1.0000000  # Pour un vecteur change_cog(data = c(\"14712\", \"16233\", \"16351\"), cog_from = 2019, cog_to = 2021) #> [1] \"14666\" \"14712\" \"16233\" \"16233\""},{"path":"/reference/check_cog.html","id":null,"dir":"Reference","previous_headings":"","what":"Vérifie le code géographique des communes — check_cog","title":"Vérifie le code géographique des communes — check_cog","text":"Compare les codes des communes au code officiel geographique (COG) pour une année demandée. Les années vont de 2008 au dernier millésime disponible.","code":""},{"path":"/reference/check_cog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vérifie le code géographique des communes — check_cog","text":"","code":"check_cog(   data,   cog,   from = NULL,   complete = FALSE,   ignore_arm = TRUE,   ignore_mayotte = FALSE,   data_res = FALSE,   message = TRUE )"},{"path":"/reference/check_cog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vérifie le code géographique des communes — check_cog","text":"data Un objet de type data frame ou vecteur. cog Année du code officiel géographique, à partir de 2008. <tidy-select> Colonne initiale des communes. Par défaut, première colonne. Sans objet si data est un vecteur. complete Vérifier que les données sont complète, c'est-à-dire que toutes les communes du COG sont représentées. Par défaut, FALSE : vérifie uniquement si toutes les communes sont dans le COG. ignore_arm Ignorer les arrondissements municipaux de Paris, Lyon et Marseille. Par défaut, TRUE. Si FALSE, les arrondissements municipaux ne sont pas dans le COG. ignore_mayotte Ignorer communes de Mayotte. Par défaut, FALSE. : les communes de Mayotte sont hors du COG avant 2012 et comprises dans le COG à partir de 2012. data_res Renvoyer le resultat de la comparaison dans une data frame. Par défaut, FALSE. message Générer un avertissement quand des différences avec le COG sont détectées. Par défaut, TRUE.","code":""},{"path":"/reference/check_cog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vérifie le code géographique des communes — check_cog","text":"Un booléen (si data_res vaut FALSE) ou une data frame (si data_res vaut TRUE).","code":""},{"path":"/reference/check_cog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vérifie le code géographique des communes — check_cog","text":"","code":"data <- data_com(2018)  # Pas d'erreurs check_cog(data, cog = 2018) #> [1] TRUE  # Messages d'erreur check_cog(data, cog = 2019) #> Warning:  #> Les communes suivantes ne sont pas dans le COG de l'annee 2019 :  #> 01059 01091 01097 01122 01154 01186 01205 01218 01221 01341 [...] #> [1] FALSE  # Verifier aussi les communes manquantes check_cog(data, cog = 2019, complete = TRUE) #> Warning:  #> Les communes suivantes ne sont pas dans le COG de l'annee 2019 :  #> 01059 01091 01097 01122 01154 01186 01205 01218 01221 01341 [...] #> [1] FALSE  # Ne pas ignorer les arrondissements municipaux data <- com_to_arm(data, to = \"CODE_ARM\") check_cog(data, cog = 2019, from = CODE_ARM, ignore_arm = FALSE) #> Warning:  #> Les communes suivantes ne sont pas dans le COG de l'annee 2019 :  #> 01059 01091 01097 01122 01154 01186 01205 01218 01221 01341 [...] #> [1] FALSE  # Renvoyer les resultats dans une base data_errors <- data |>    check_cog(cog = 2009, complete = TRUE, data_res = TRUE, message = FALSE)  # Pour un vecteur x <- data$COM check_cog(x, cog = 2018) #> [1] TRUE"},{"path":"/reference/codes_to_many.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge or split geographic codes — codes_to_many","title":"Merge or split geographic codes — codes_to_many","text":"Convert geographic codes managing splits merges. number rows data frame dimension vector preserved.","code":""},{"path":"/reference/codes_to_many.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge or split geographic codes — codes_to_many","text":"","code":"codes_to_many(   data,   codes_ini,   codes_fin,   extra = NULL,   from = NULL,   to = NULL,   ... )"},{"path":"/reference/codes_to_many.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge or split geographic codes — codes_to_many","text":"data Data frame vector codes_ini Initial geographic codes codes_fin Final geographic codes extra geographic codes Initial column (data frame) Final column (data frame) ... Arguments passed methods.","code":""},{"path":"/reference/codes_to_many.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge or split geographic codes — codes_to_many","text":"data frame equal greater number rows vector equal greater dimension.","code":""},{"path":"/reference/codes_to_many.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge or split geographic codes — codes_to_many","text":"","code":"# Region codes changing in 2016 new_reg <- c(\"27\", \"27\", \"28\", \"28\", \"32\", \"32\", \"44\", \"44\", \"44\", \"75\", \"75\",              \"75\", \"76\", \"76\", \"84\", \"84\") old_reg <- c(\"26\", \"43\", \"25\", \"23\", \"22\", \"31\", \"21\", \"41\", \"42\", \"54\", \"74\",              \"72\", \"73\", \"91\", \"82\", \"83\")  # A data frame with some new regions data <- data.frame(REG = c(\"11\", \"27\", \"84\"))  # Convert into old regions data |> codes_to_many(    codes_ini = new_reg,    codes_fin = old_reg,    from = \"REG\",    to = \"OLD_REG\",    extra = function(x){x} ) #>   REG OLD_REG #> 1  11      11 #> 2  27      26 #> 3  27      43 #> 4  84      82 #> 5  84      83  # With a vector codes_to_many(   data = c(\"11\", \"27\", \"84\"),   codes_ini = new_reg,   codes_fin = old_reg,   extra = function(x){x} ) #> [1] \"11\" \"26\" \"43\" \"82\" \"83\""},{"path":"/reference/codes_to_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge geographic codes — codes_to_one","title":"Merge geographic codes — codes_to_one","text":"Convert geographic codes preserving number rows data frame dimension vector. Merging handled, splitting.","code":""},{"path":"/reference/codes_to_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge geographic codes — codes_to_one","text":"","code":"codes_to_one(   data,   codes_ini,   codes_fin,   extra = NULL,   from = NULL,   to = NULL,   ... )"},{"path":"/reference/codes_to_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge geographic codes — codes_to_one","text":"data Data frame vector codes_ini Initial geographic codes codes_fin Final geographic codes extra geographic codes Initial column (data frame) Final column (data frame) ... Arguments passed methods.","code":""},{"path":"/reference/codes_to_one.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge geographic codes — codes_to_one","text":"data frame number rows vector equal dimension","code":""},{"path":"/reference/codes_to_one.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge geographic codes — codes_to_one","text":"","code":"# Region codes changing in 2016 new_reg <- c(\"27\", \"27\", \"28\", \"28\", \"32\", \"32\", \"44\", \"44\", \"44\", \"75\", \"75\",              \"75\", \"76\", \"76\", \"84\", \"84\") old_reg <- c(\"26\", \"43\", \"25\", \"23\", \"22\", \"31\", \"21\", \"41\", \"42\", \"54\", \"74\",              \"72\", \"73\", \"91\", \"82\", \"83\")  # A data frame with some old regions data <- data.frame(REG = c(\"11\", \"26\", \"43\", \"82\", \"83\"))  # Convert into new regions data |> codes_to_one(    codes_ini = old_reg,    codes_fin = new_reg,    from = \"REG\",    to = \"NEW_REG\",    extra = function(x){x} ) #>   REG NEW_REG #> 1  11      11 #> 2  26      27 #> 3  43      27 #> 4  82      84 #> 5  83      84  # With a vector codes_to_one(   data = c(\"11\", \"26\", \"43\", \"82\", \"83\"),   codes_ini = old_reg,   codes_fin = new_reg,   extra = function(x){x} ) #> [1] \"11\" \"27\" \"27\" \"84\" \"84\""},{"path":"/reference/cog_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Évènements du code officiel géographique — cog_events","title":"Évènements du code officiel géographique — cog_events","text":"Renvoie une data frame avec les évenements ayant eu lieu depuis 2008 pour un code géographique donné : fusions, scissions ou changement de code.","code":""},{"path":"/reference/cog_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Évènements du code officiel géographique — cog_events","text":"","code":"cog_events(x, message = TRUE)"},{"path":"/reference/cog_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Évènements du code officiel géographique — cog_events","text":"x Code géographique. message Générer un avertissement si aucun évènement n'eu lieu depuis 2008 ou si le code demandé n'aparaît pas dans le code officel géographique. Par défaut, TRUE.","code":""},{"path":"/reference/cog_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Évènements du code officiel géographique — cog_events","text":"Une data frame","code":""},{"path":"/reference/cog_events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Évènements du code officiel géographique — cog_events","text":"Colonnes de la data frame générée par la fonction cog_events() : COG_INI : Année initiale du code officiel géographique. COG_FIN : Année finale du code officiel géographique. COM_INI : Code initial de la commune. COM_FIN : Code final de la commune. NB_COM_INI : Nombre initial de communes, supérieur à 1 pour une fusion. NB_COM_FIN : Nombre final de communes, supérieur à 1 pour une scission.","code":""},{"path":"/reference/cog_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Évènements du code officiel géographique — cog_events","text":"","code":"# Exemple d'une commune avec un changement de code et une fusion cog_events(\"14472\") #>   COG_INI COG_FIN COM_INI COM_FIN NB_COM_INI NB_COM_FIN #> 1    2015    2016   14697   14472          1          1 #> 2    2016    2017   14472   14654         13          1  # Exemple d'une commune avec une fusion et un retablissement (scission) cog_events(\"14712\") #>   COG_INI COG_FIN COM_INI COM_FIN NB_COM_INI NB_COM_FIN #> 1    2016    2017   14666   14712          2          1 #> 2    2016    2017   14712   14712          2          1 #> 3    2019    2020   14712   14666          1          2 #> 4    2019    2020   14712   14712          1          2  # Exemple d'une commune sans evenements dans le COG cog_events(\"13001\") #> Warning: Pas d'evenement pour \"13001\" entre 2008 et 2025 #> [1] COG_INI    COG_FIN    COM_INI    COM_FIN    NB_COM_INI NB_COM_FIN #> <0 rows> (or 0-length row.names)  # Exemple d'un code n'aparaissant pas dans le COG cog_events(\"13999\") #> Warning: \"13999\" n'est pas dans le COG entre 2008 et 2025 #> [1] COG_INI    COG_FIN    COM_INI    COM_FIN    NB_COM_INI NB_COM_FIN #> <0 rows> (or 0-length row.names)"},{"path":"/reference/cog_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Plus grande année disponible — cog_max","title":"Plus grande année disponible — cog_max","text":"Plus grande année disponible","code":""},{"path":"/reference/cog_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plus grande année disponible — cog_max","text":"","code":"cog_max"},{"path":"/reference/cog_max.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Plus grande année disponible — cog_max","text":"Nombre","code":""},{"path":"/reference/cog_min.html","id":null,"dir":"Reference","previous_headings":"","what":"Plus petite année disponible — cog_min","title":"Plus petite année disponible — cog_min","text":"Plus petite année disponible","code":""},{"path":"/reference/cog_min.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plus petite année disponible — cog_min","text":"","code":"cog_min"},{"path":"/reference/cog_min.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Plus petite année disponible — cog_min","text":"Nombre","code":""},{"path":"/reference/cog_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Année de la base communale de référence — cog_ref","title":"Année de la base communale de référence — cog_ref","text":"Année de la base communale de référence","code":""},{"path":"/reference/cog_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Année de la base communale de référence — cog_ref","text":"","code":"cog_ref"},{"path":"/reference/cog_ref.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Année de la base communale de référence — cog_ref","text":"Nombre","code":""},{"path":"/reference/cog_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Table de passage entre deux années du code officiel géographique des communes — cog_transition","title":"Table de passage entre deux années du code officiel géographique des communes — cog_transition","text":"Renvoie la table de passage des communes qui sont modifiées entre deux années du code officiel géographique (COG).","code":""},{"path":"/reference/cog_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table de passage entre deux années du code officiel géographique des communes — cog_transition","text":"","code":"cog_transition(cog_from, cog_to)"},{"path":"/reference/cog_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table de passage entre deux années du code officiel géographique des communes — cog_transition","text":"cog_from Année du code officiel géographique des communes initiales dans la table de passage cog_to Année du code officiel géographique des communes finales dans la table de passage","code":""},{"path":"/reference/cog_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table de passage entre deux années du code officiel géographique des communes — cog_transition","text":"Une data frame","code":""},{"path":"/reference/cog_transition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Table de passage entre deux années du code officiel géographique des communes — cog_transition","text":"Colonnes de la data frame générée par la fonction cog_transition() : COM_INI : Code commune initial COM_FIN : Code commune final POP_INI : Population initiale, pouvant servir de pondération pour la fonction adapt_to_change() POP_FIN : Population finale, pouvant servir de pondération pour la fonction adapt_to_change() NB_COM_INI : Nombre de communes initial NB_COM_FIN : Nombre de communes final","code":""},{"path":"/reference/cog_transition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table de passage entre deux années du code officiel géographique des communes — cog_transition","text":"","code":"cog_transition(cog_from = 2019, cog_to = 2020) #> # A tibble: 8 × 7 #>   COM_INI COM_FIN POP_INI POP_FIN NB_COM_INI NB_COM_FIN SPLIT_RATIO #>   <chr>   <chr>     <int>   <dbl>      <int>      <int>       <dbl> #> 1 14712   14666      5428    1918          1          2       0.353 #> 2 14712   14712      5428    3510          1          2       0.647 #> 3 21183   21183       896    1037          2          1       1     #> 4 21213   21452       807    2664          2          1       1     #> 5 21452   21452      1857    2664          2          1       1     #> 6 21507   21183       141    1037          2          1       1     #> 7 45287   45307        97    1109          2          1       1     #> 8 45307   45307      1012    1109          2          1       1"},{"path":"/reference/com_to_arm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convertit les communes en arrondissements municipaux — com_to_arm","title":"Convertit les communes en arrondissements municipaux — com_to_arm","text":"Convertit les codes géographiques des communes de Paris, Lyon et Marseille en codes géographiques d'arrondissements municipaux.","code":""},{"path":"/reference/com_to_arm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convertit les communes en arrondissements municipaux — com_to_arm","text":"","code":"com_to_arm(   data,   from = NULL,   to = NULL,   extra = function(x) {      return(x)  } )"},{"path":"/reference/com_to_arm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convertit les communes en arrondissements municipaux — com_to_arm","text":"data Un objet de type data frame ou vecteur. <tidy-select> Colonne initiale des communes. Par défaut, première colonne. Sans objet si data est un vecteur. Colonne finale pour les communes ou arrondissements municipaux. Par défaut, même nom que la colonne initiale. Sans objet si data est un vecteur. extra Autres codes géographiques : valeur unique, paires de clés et de valeurs ou fonction. Par défaut, les codes géographiques en dehors Paris, Lyon et Marseille ne sont pas changés.","code":""},{"path":"/reference/com_to_arm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convertit les communes en arrondissements municipaux — com_to_arm","text":"Un objet du même type que data. Pour une data frame, une data frame avec un nombre de lignes égal ou supérieur. Pour un vecteur, un vecteur de dimension égale ou supérieure.","code":""},{"path":"/reference/com_to_arm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convertit les communes en arrondissements municipaux — com_to_arm","text":"","code":"x <- c(\"01123\",\"13055\",\"75056\")  # data frame data <- data.frame(ID = c(1:3), CODE_COM = x) data |> com_to_arm(from = CODE_COM, to = \"CODE_ARM\") |> head() #>   ID CODE_COM CODE_ARM #> 1  1    01123    01123 #> 2  2    13055    13201 #> 3  2    13055    13202 #> 4  2    13055    13203 #> 5  2    13055    13204 #> 6  2    13055    13205  data |> com_to_arm(from = CODE_COM) |> head() #>   ID CODE_COM #> 1  1    01123 #> 2  2    13201 #> 3  2    13202 #> 4  2    13203 #> 5  2    13204 #> 6  2    13205  # vecteur com_to_arm(x) #>  [1] \"01123\" \"13201\" \"13202\" \"13203\" \"13204\" \"13205\" \"13206\" \"13207\" \"13208\" #> [10] \"13209\" \"13210\" \"13211\" \"13212\" \"13213\" \"13214\" \"13215\" \"13216\" \"75101\" #> [19] \"75102\" \"75103\" \"75104\" \"75105\" \"75106\" \"75107\" \"75108\" \"75109\" \"75110\" #> [28] \"75111\" \"75112\" \"75113\" \"75114\" \"75115\" \"75116\" \"75117\" \"75118\" \"75119\" #> [37] \"75120\" com_to_arm(x, extra = \"?\") #>  [1] \"?\"     \"13201\" \"13202\" \"13203\" \"13204\" \"13205\" \"13206\" \"13207\" \"13208\" #> [10] \"13209\" \"13210\" \"13211\" \"13212\" \"13213\" \"13214\" \"13215\" \"13216\" \"75101\" #> [19] \"75102\" \"75103\" \"75104\" \"75105\" \"75106\" \"75107\" \"75108\" \"75109\" \"75110\" #> [28] \"75111\" \"75112\" \"75113\" \"75114\" \"75115\" \"75116\" \"75117\" \"75118\" \"75119\" #> [37] \"75120\""},{"path":"/reference/com_to_dep.html","id":null,"dir":"Reference","previous_headings":"","what":"Convertit les communes en départements — com_to_dep","title":"Convertit les communes en départements — com_to_dep","text":"Convertit les codes géographiques des communes en codes géographiques des départements.","code":""},{"path":"/reference/com_to_dep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convertit les communes en départements — com_to_dep","text":"","code":"com_to_dep(   data,   from = \"COM\",   to = \"DEP\",   extra = c(`977` = \"977\", `978` = \"978\", `986` = \"986\", `987` = \"987\", `988` = \"988\", ZZ     = \"ZZZ\", `NA` = \"999\") )"},{"path":"/reference/com_to_dep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convertit les communes en départements — com_to_dep","text":"data Un objet de type data frame ou vecteur. <tidy-select> Colonne initiale des communes. Par défaut, \"COM\". Sans objet si data est un vecteur. Colonne finale pour les départements. Par défaut, \"DEP\". Sans objet si data est un vecteur. extra Autres codes géographiques : NULL, valeur unique, vecteur nommé ou fonction. Par défaut, collectivités d'outre-mer et étranger.","code":""},{"path":"/reference/com_to_dep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convertit les communes en départements — com_to_dep","text":"Un objet du même type que data. Pour une data frame, une data frame avec le même nombre de lignes. Pour un vecteur, un vecteur de dimension égale.","code":""},{"path":"/reference/com_to_dep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convertit les communes en départements — com_to_dep","text":"","code":"x <-  c(\"84001\", \"75001\", \"75001\", \"97401\", \"98601\", \"YYYYY\", \"99999\", \"A1001\", NA)  # data frame data <- data.frame(ID = c(1:length(x)), COM = x) data |> com_to_dep(from = COM, to = \"DEP\") #>   ID   COM DEP #> 1  1 84001  84 #> 2  2 75001  75 #> 3  3 75001  75 #> 4  4 97401 974 #> 5  5 98601 986 #> 6  6 YYYYY 999 #> 7  7 99999 999 #> 8  8 A1001 999 #> 9  9  <NA> 999  # Personalisation des codes extras codes_extra <- c(\"977\" = \"ZZZ\", \"978\" = \"ZZZ\", \"986\" = \"ZZZ\", \"987\" = \"ZZZ\",  \"988\" = \"ZZZ\", \"ZZ\" = \"ZZZ\", \"YY\" = \"YYY\", \"NA\" = \"999\")  data |> com_to_dep(from = COM, to = \"DEP\", extra = codes_extra) #>   ID   COM DEP #> 1  1 84001  84 #> 2  2 75001  75 #> 3  3 75001  75 #> 4  4 97401 974 #> 5  5 98601 ZZZ #> 6  6 YYYYY YYY #> 7  7 99999 999 #> 8  8 A1001 999 #> 9  9  <NA> 999  # Vecteur com_to_dep(x) #> [1] \"84\"  \"75\"  \"75\"  \"974\" \"986\" \"999\" \"999\" \"999\" \"999\" com_to_dep(x, extra = NULL) #> [1] \"84\"  \"75\"  \"75\"  \"974\" NA    NA    NA    NA    NA    com_to_dep(x, extra = function(x) {return (x)}) #> [1] \"84\"  \"75\"  \"75\"  \"974\" \"986\" \"YY\"  \"99\"  \"A1\"  NA"},{"path":"/reference/data_arm_com.html","id":null,"dir":"Reference","previous_headings":"","what":"Table de passage entre les arrondissements municipaux et les communes de Paris, Lyon et Marseille — data_arm_com","title":"Table de passage entre les arrondissements municipaux et les communes de Paris, Lyon et Marseille — data_arm_com","text":"Table de passage entre les arrondissements municipaux et les communes de Paris, Lyon et Marseille","code":""},{"path":"/reference/data_arm_com.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table de passage entre les arrondissements municipaux et les communes de Paris, Lyon et Marseille — data_arm_com","text":"","code":"data_arm_com"},{"path":"/reference/data_arm_com.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table de passage entre les arrondissements municipaux et les communes de Paris, Lyon et Marseille — data_arm_com","text":"Une data frame avec 2 variables : COM Code commune ARM Code arrondissement Pour plus de détails sur le code officiel géographique https://www.insee.fr/fr/information/2560452","code":""},{"path":"/reference/data_com.html","id":null,"dir":"Reference","previous_headings":"","what":"Base des codes des communes selon l'année du code officiel géographique — data_com","title":"Base des codes des communes selon l'année du code officiel géographique — data_com","text":"Renvoie une data frame avec les codes géographiques des communes françaises selon l'année demandée du code officiel géographique (COG).","code":""},{"path":"/reference/data_com.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base des codes des communes selon l'année du code officiel géographique — data_com","text":"","code":"data_com(cog)"},{"path":"/reference/data_com.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base des codes des communes selon l'année du code officiel géographique — data_com","text":"cog Une année du code officiel géographique des communes (COG).","code":""},{"path":"/reference/data_com.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base des codes des communes selon l'année du code officiel géographique — data_com","text":"Une data frame.","code":""},{"path":"/reference/data_com.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base des codes des communes selon l'année du code officiel géographique — data_com","text":"","code":"data_com_2018 <- data_com(cog = 2018)"},{"path":"/reference/data_com_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Base communale de référence — data_com_ref","title":"Base communale de référence — data_com_ref","text":"Base intermédiaire utilisée par les bases communales antérieures.","code":""},{"path":"/reference/data_com_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base communale de référence — data_com_ref","text":"","code":"data_com_ref"},{"path":"/reference/data_com_ref.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Base communale de référence — data_com_ref","text":"Une data frame avec 34945 lignes et 1 variable : COM Code géographique en 2023 Pour plus de détails sur le code officiel géographique https://www.insee.fr/fr/information/2560452","code":""},{"path":"/reference/data_dep_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Table de passage entre les codes des départements et les codes des régions — data_dep_reg","title":"Table de passage entre les codes des départements et les codes des régions — data_dep_reg","text":"Table de passage entre les codes des départements et les codes des régions","code":""},{"path":"/reference/data_dep_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table de passage entre les codes des départements et les codes des régions — data_dep_reg","text":"","code":"data_dep_reg"},{"path":"/reference/data_dep_reg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table de passage entre les codes des départements et les codes des régions — data_dep_reg","text":"Une data frame avec 2 variables : REG Code région DEP Code département Pour plus de détails sur le code officiel géographique https://www.insee.fr/fr/information/2560452","code":""},{"path":"/reference/data_table_passage.html","id":null,"dir":"Reference","previous_headings":"","what":"Table de passage du code officiel géographique des communes — data_table_passage","title":"Table de passage du code officiel géographique des communes — data_table_passage","text":"Base intermédiaire utilisée pour le changement de géographie des communes. Contient les communes qui ont changé de code officiel géographique depuis 2008. La population des communes sert de pondération par défaut pour recalculer des variables. Voir le découpage communal (https://www.insee.fr/fr/information/2028028) et l'historique des populations légales (https://www.insee.fr/fr/statistiques/2522602) sur Insee.fr.","code":""},{"path":"/reference/data_table_passage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table de passage du code officiel géographique des communes — data_table_passage","text":"","code":"data_table_passage"},{"path":"/reference/data_table_passage.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table de passage du code officiel géographique des communes — data_table_passage","text":"Une data frame avec 2724 lignes et 34 variables : COM_2008 Code géographique en 2008 COM_2009 Code géographique en 2009 COM_2010 Code géographique en 2010 COM_2011 Code géographique en 2011 COM_2012 Code géographique en 2012 COM_2013 Code géographique en 2013 COM_2014 Code géographique en 2014 COM_2015 Code géographique en 2015 COM_2016 Code géographique en 2016 COM_2017 Code géographique en 2017 COM_2018 Code géographique en 2018 COM_2019 Code géographique en 2019 COM_2020 Code géographique en 2020 COM_2021 Code géographique en 2021 COM_2022 Code géographique en 2022 COM_2023 Code géographique en 2023 COM_2024 Code géographique en 2024 POP_GEO_2008 Population de référence en géographie 2008 POP_GEO_2009 Population de référence en géographie 2009 POP_GEO_2010 Population de référence en géographie 2010 POP_GEO_2011 Population de référence en géographie 2011 POP_GEO_2012 Population de référence en géographie 2012 POP_GEO_2013 Population de référence en géographie 2013 POP_GEO_2014 Population de référence en géographie 2014 POP_GEO_2015 Population de référence en géographie 2015 POP_GEO_2016 Population de référence en géographie 2016 POP_GEO_2017 Population de référence en géographie 2017 POP_GEO_2018 Population de référence en géographie 2018 POP_GEO_2019 Population de référence en géographie 2019 POP_GEO_2020 Population de référence en géographie 2020 POP_GEO_2021 Population de référence en géographie 2021 POP_GEO_2022 Population de référence en géographie 2022 POP_GEO_2023 Population de référence en géographie 2023 POP_GEO_2024 Population de référence en géographie 2024","code":""},{"path":"/reference/dep_to_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Convertit les départements en régions — dep_to_reg","title":"Convertit les départements en régions — dep_to_reg","text":"Convertit les codes géographiques des départements en codes géographiques des régions.","code":""},{"path":"/reference/dep_to_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convertit les départements en régions — dep_to_reg","text":"","code":"dep_to_reg(data, from = \"DEP\", to = \"REG\", extra = c(`999` = \"99\", ZZZ = \"ZZ\"))"},{"path":"/reference/dep_to_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convertit les départements en régions — dep_to_reg","text":"data Un objet de type data frame ou vecteur. <tidy-select> Colonne initiale des départements. Par défaut, \"DEP\". Sans objet si data est un vecteur. Colonne finale pour les régions. Par défaut, \"REG\". Sans objet si data est un vecteur. extra Autres codes géographiques : NULL, valeur unique, vecteur nommé ou fonction. Par défaut, collectivités d'outre-mer et étranger.","code":""},{"path":"/reference/dep_to_reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convertit les départements en régions — dep_to_reg","text":"Un objet du même type que data. Pour une data frame, une data frame avec le même nombre de lignes. Pour un vecteur, un vecteur de dimension égale.","code":""},{"path":"/reference/dep_to_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convertit les départements en régions — dep_to_reg","text":"","code":"x <-  c(\"13\", \"84\", \"75\", \"75\", \"999\", \"ZZZ\",\"YYY\", NA)  # data frame data <- data.frame(ID = c(1:length(x)), CODE_DEP = x) data |> dep_to_reg(from = CODE_DEP, to = \"CODE_REG\") #>   ID CODE_DEP CODE_REG #> 1  1       13       93 #> 2  2       84       93 #> 3  3       75       11 #> 4  4       75       11 #> 5  5      999       99 #> 6  6      ZZZ       ZZ #> 7  7      YYY     <NA> #> 8  8     <NA>     <NA>  # vecteur dep_to_reg(x) #> [1] \"93\" \"93\" \"11\" \"11\" \"99\" \"ZZ\" NA   NA   dep_to_reg(x, extra = c(\"YYY\"=\"YY\")) #> [1] \"93\" \"93\" \"11\" \"11\" NA   NA   \"YY\" NA   unique(dep_to_reg(x)) #> [1] \"93\" \"11\" \"99\" \"ZZ\" NA"},{"path":"/reference/filter_mayotte.html","id":null,"dir":"Reference","previous_headings":"","what":"Enlève (ou pas) les communes de Mayotte, selon l'année du code officiel géographique — filter_mayotte","title":"Enlève (ou pas) les communes de Mayotte, selon l'année du code officiel géographique — filter_mayotte","text":"Si cog >= 2012, les communes de Mayotte sont conservées. Si cog < 2012, les communes de Mayotte sont supprimées.","code":""},{"path":"/reference/filter_mayotte.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enlève (ou pas) les communes de Mayotte, selon l'année du code officiel géographique — filter_mayotte","text":"","code":"filter_mayotte(data, cog = 2008, from = NULL)"},{"path":"/reference/filter_mayotte.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enlève (ou pas) les communes de Mayotte, selon l'année du code officiel géographique — filter_mayotte","text":"data Un objet de type data frame ou vecteur. cog Année du cog. Par défaut, 2008 : les communes de Mayotte sont supprimées. <tidy-select> Colonne des communes. Par défaut, première colonne. Sans objet si data est un vecteur.","code":""},{"path":"/reference/filter_mayotte.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enlève (ou pas) les communes de Mayotte, selon l'année du code officiel géographique — filter_mayotte","text":"Un objet du même type que data. Pour une data frame, une data frame avec un nombre de lignes inférieur ou égal. Pour un vecteur, un vecteur de dimension inférieure ou égale.","code":""},{"path":"/reference/filter_mayotte.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enlève (ou pas) les communes de Mayotte, selon l'année du code officiel géographique — filter_mayotte","text":"","code":"data <- data.frame(COM = c(\"97424\", \"97601\"))  # Par défaut les lignes des communes de Mayotte sont supprimées data |> filter_mayotte(from = COM) #>     COM #> 1 97424  # Si cog >= 2012 elles sont conservées data |> filter_mayotte(cog = 2013, from = COM) #>     COM #> 1 97424 #> 2 97601  # Pour un vecteur filter_mayotte(c(\"97424\", \"97601\"), from = COM) #> [1] \"97424\""},{"path":"/reference/reg_to_dep.html","id":null,"dir":"Reference","previous_headings":"","what":"Convertit les régions en départements — reg_to_dep","title":"Convertit les régions en départements — reg_to_dep","text":"Convertit les codes géographiques des régions en codes géographiques des départements.","code":""},{"path":"/reference/reg_to_dep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convertit les régions en départements — reg_to_dep","text":"","code":"reg_to_dep(data, from = \"REG\", to = \"DEP\", extra = c(`99` = \"999\", ZZ = \"ZZZ\"))"},{"path":"/reference/reg_to_dep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convertit les régions en départements — reg_to_dep","text":"data Un objet de type data frame ou vecteur. <tidy-select> Colonne initiale des régions. Par défaut, \"REG\". Sans objet si data est un vecteur. Colonne finale pour les départements. Par défaut, \"DEP\". Sans objet si data est un vecteur. extra Autres codes géographiques : NULL, valeur unique, vecteur nommé ou fonction. Par défaut, collectivités d'outre-mer et étranger.","code":""},{"path":"/reference/reg_to_dep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convertit les régions en départements — reg_to_dep","text":"Un objet du même type que data. Pour une data frame, une data frame avec un nombre de lignes égal ou supérieur. Pour un vecteur, un vecteur de dimension égale ou supérieure.","code":""},{"path":"/reference/reg_to_dep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convertit les régions en départements — reg_to_dep","text":"","code":"x <- c(\"94\", \"93\", \"ZZ\", NA)  # data frame data <- data.frame(ID = c(1:length(x)), CODE_REG = x) reg_to_dep(data, from = CODE_REG,  to = \"CODE_DEP\") #>    ID CODE_REG CODE_DEP #> 1   1       94       2A #> 2   1       94       2B #> 3   2       93       04 #> 4   2       93       05 #> 5   2       93       06 #> 6   2       93       13 #> 7   2       93       83 #> 8   2       93       84 #> 9   3       ZZ      ZZZ #> 10  4     <NA>     <NA> # vecteur reg_to_dep(x) #>  [1] \"2A\"  \"2B\"  \"04\"  \"05\"  \"06\"  \"13\"  \"83\"  \"84\"  \"ZZZ\" NA    reg_to_dep(x, extra = \"?\") #>  [1] \"2A\" \"2B\" \"04\" \"05\" \"06\" \"13\" \"83\" \"84\" \"?\"  \"?\""},{"path":"/news/index.html","id":"gescodgeo-20251","dir":"Changelog","previous_headings":"","what":"gescodgeo 2025.1","title":"gescodgeo 2025.1","text":"Juin 2025 Mise à jour de la population de référence dans la table de passage à partir de la population légale pour l’année 2025.","code":""},{"path":"/news/index.html","id":"gescodgeo-20250","dir":"Changelog","previous_headings":"","what":"gescodgeo 2025.0","title":"gescodgeo 2025.0","text":"Février 2025 Ajout du code officiel géographique 2025. La population de référence 2025 est une estimation temporaire d’après la population légale 2024, car la population légale 2025 n’est pas encore disponible.","code":""},{"path":"/news/index.html","id":"gescodgeo-20242","dir":"Changelog","previous_headings":"","what":"gescodgeo 2024.2","title":"gescodgeo 2024.2","text":"Décembre 2024 Fonction cog_events() : renvoie une data frame avec les évenements ayant eu lieu depuis 2008 pour un code géographique donné : fusions, scissions ou changement de code.","code":""},{"path":"/news/index.html","id":"gescodgeo-20241","dir":"Changelog","previous_headings":"","what":"gescodgeo 2024.1","title":"gescodgeo 2024.1","text":"Novembre 2024 Mise à jour de la population de référence dans la table de passage à partir de la population légale pour l’année 2024. change_annee_com() remplacée par change_cog(), recalcule() remplacée par adapt_to_change(), verifie_cog() remplacée par check_cog(), table_passage() remplacée par cog_transition(), hors_mayotte() remplacée par filter_mayotte(). dordogne_2020, dordogne_modtrans_2020, marseille_2020.","code":""},{"path":"/news/index.html","id":"gescodgeo-20240","dir":"Changelog","previous_headings":"","what":"gescodgeo 2024.0","title":"gescodgeo 2024.0","text":"Mars 2024 Ajout du code officiel géographique 2024. La population de référence 2024 est une estimation temporaire d’après la population légale 2023, car la population légale 2024 n’est pas encore disponible. Modification de la fonction change_cog() : argument split_ratio pour ajouter une clé de répartition qui peut être utilisée pour répartir des effectifs quand des communes sont scindées.","code":""}]
