distinct(COM_INI, .keep_all = TRUE) %>%
mutate(COM_2023 = COM_INI, EFFECTIF = POP_INI, MOYENNE = as.numeric(substr(COM_2023,2,3)) / 100) %>%
select(COM_2023, EFFECTIF, MOYENNE)
data
head(data)
# Passer du COG 2023 au cog 2025
data <- data %>%
change_cog(cog_from = 2023, cog_to = 2025, from = COM_2023, to = "COM_2025")
# Exemple d'utilisation de gescodgeo
head(data)
data <- tab_passage %>%
distinct(COM_INI, .keep_all = TRUE) %>%
mutate(COM_2023 = COM_INI, EFFECTIF = POP_INI, MOYENNE = as.numeric(substr(COM_2023,2,3)) / 100) %>%
select(COM_2023, EFFECTIF, MOYENNE)
# Exemple d'utilisation de gescodgeo
head(data)
# Passer du COG 2023 au cog 2025
data <- data %>%
change_cog(cog_from = 2023, cog_to = 2025, from = COM_2023, to = "COM_2025")
data <- tab_passage %>%
distinct(COM_INI, .keep_all = TRUE) %>%
mutate(COM_2023 = COM_INI, EFFECTIF = POP_INI, MOYENNE = as.numeric(substr(COM_2023,2,3)) / 100) %>%
select(COM_2023, EFFECTIF, MOYENNE)
data
# Passer du COG 2023 au cog 2025
data <- data %>%
change_cog(cog_from = 2023, cog_to = 2025, from = COM_2023, to = "COM_2025")
data_2023 <- tab_passage %>%
distinct(COM_INI, .keep_all = TRUE) %>%
mutate(COM_2023 = COM_INI, EFFECTIF = POP_INI, MOYENNE = as.numeric(substr(COM_2023,2,3)) / 100) %>%
select(COM_2023, EFFECTIF, MOYENNE)
data_2025
data_2023
# Passer du COG 2023 au cog 2025
data_2025 <- data_2023 %>%
change_cog(cog_from = 2023, cog_to = 2025, from = COM_2023)
# Recalculer les variables après un changement de géograpraphie
data <- data %>% change_cog(
cog_from = 2023,
cog_to = 2025,
from = COM_2023,
to = "COM_2025",
split_ratio = TRUE
)
# Recalculer les variables après un changement de géograpraphie
data_2025 <- data_2023 %>% change_cog(
cog_from = 2023,
cog_to = 2025,
from = COM_2023,
to = "COM_2025",
split_ratio = TRUE
)
# Fusion : pondérer les moyennes
data_2025 <- data_2025 %>%
group_by(COM_2025) %>%
summarise(MOYENNE = weighted.mean(MOYENNE, POP_INI))
# Recalculer les variables après un changement de géograpraphie
data_2025 <- data_2023 %>% change_cog(
cog_from = 2023,
cog_to = 2025,
from = COM_2023,
to = "COM_2025",
split_ratio = TRUE,
infos = TRUE
)
# Recalculer les variables après un changement de géograpraphie
data_2025 <- data_2023 %>% change_cog(
cog_from = 2023,
cog_to = 2025,
from = COM_2023,
to = "COM_2025",
# split_ratio = TRUE,
infos = TRUE
)
# Scissions : répartir les effectifs
data_2025 <- data_2023 %>% mutate(EFFECTIF = EFFECTIF * SPLIT_RATIO)
# Recalculer les variables après un changement de géograpraphie
data_2025 <- data_2023 %>% change_cog(
cog_from = 2023,
cog_to = 2025,
from = COM_2023,
to = "COM_2025",
split_ratio = TRUE,
infos = TRUE
)
# Scissions : répartir les effectifs
data_2025 <- data_2023 %>% mutate(EFFECTIF = EFFECTIF * SPLIT_RATIO)
# Recalculer les variables après un changement de géograpraphie
data_2025 <- data_2023 %>% change_cog(
cog_from = 2023,
cog_to = 2025,
from = COM_2023,
to = "COM_2025",
split_ratio = TRUE,
infos = TRUE
)
# Scissions : répartir les effectifs
data_2025 <- data_2023 %>% mutate(EFFECTIF = EFFECTIF * SPLIT_RATIO)
# Recalculer les variables après un changement de géograpraphie
data_2025 <- data_2023 %>% change_cog(
cog_from = 2023,
cog_to = 2025,
from = COM_2023,
to = "COM_2025",
split_ratio = TRUE,
infos = TRUE
)
data_2025
# Scissions : répartir les effectifs
data_2025 <- data_2025 %>% mutate(EFFECTIF = EFFECTIF * SPLIT_RATIO)
# Fusion : pondérer les moyennes
data_2025 <- data_2025 %>%
group_by(COM_2025) %>%
summarise(MOYENNE = weighted.mean(MOYENNE, POP_INI))
# Recalculer les variables après un changement de géograpraphie
data_2025 <- data_2023 %>% change_cog(
cog_from = 2023,
cog_to = 2025,
from = COM_2023,
to = "COM_2025",
# split_ratio = TRUE,
infos = TRUE
)
# Scissions : répartir les effectifs
data_2025 <- data_2025 %>% mutate(EFFECTIF = EFFECTIF * SPLIT_RATIO)
# Table de passage
tab_passage_2014_2021 <- cog_transition(2014, 2021)
# Enregistrement
tab_passage_2014_2021 %>% write.csv2("Z:/tab_passage_2014_2021.csv")
View(tab_passage_2014_2021)
View(tab_passage_2014_2021)
check_cog(tab_passage_2014_2021$COM_INI, 2014)
check_cog(tab_passage_2014_2021$COM_INI, 2021)
check_cog(tab_passage_2014_2021$COM_FIN, 2021)
# Enregistrement
tab_passage_2014_2021 %>% write.csv2("Z:/tab_passage_2014_2021.csv")
### pkgdown
library(pkgdown)
options(pkgdown.internet = FALSE)
# Accueil
devtools::build_readme() # Mise à jour du readme
### pkgdown
library(pkgdown)
options(pkgdown.internet = FALSE)
# Accueil
devtools::build_readme() # Mise à jour du readme
# Accueil
devtools::build_readme() # Mise à jour du readme
build_home_index()
pkgdown::preview_site(path='index.html')
build_home_index()
pkgdown::preview_site(path='index.html')
build_home_index()
build_home_index()
build_home_index()
dico <- arrow::read_parque("P:/PSAR_SL/Bonnes_pratiques/UtilRP/dictionnaires_modalites_RP.parquet")
dico <- arrow::read_parquet("P:/PSAR_SL/Bonnes_pratiques/UtilRP/dictionnaires_modalites_RP.parquet")
View(dico)
cog <- 2025
pl <- cog - 3
# Base communale
bc <- readRDS(paste0(dir_p,"an_",cog,"/bc_",cog,"_popleg",pl,".rds")) %>%
# Identifant DEPCOM + nom en majuscule
rename_with(.fn = toupper) %>%
# Population de référence
mutate(across(.cols=paste0("POP_MUN_",pl), .fns = ~ .x, .names = "POP_REF"))
# Initialisation
library(dplyr)
# Chemin de data-raw
dir <- "U:/workspace/gescodgeo/data-raw/"
# Chemin des bases commuales sur P
dir_p <- "P:/PSAR_AT/ZONAGES/BasesCommunales/"
cog <- 2025
pl <- cog - 3
# Base communale
bc <- readRDS(paste0(dir_p,"an_",cog,"/bc_",cog,"_popleg",pl,".rds")) %>%
# Identifant DEPCOM + nom en majuscule
rename_with(.fn = toupper) %>%
# Population de référence
mutate(across(.cols=paste0("POP_MUN_",pl), .fns = ~ .x, .names = "POP_REF"))
# Base communale
bc <- readRDS(paste0(dir_p,"an_",cog,"/bc_",cog,"_popleg",pl,".rds")) %>%
# Identifant DEPCOM + nom en majuscule
rename_with(.fn = toupper) %>%
# Population de référence
mutate(across(.cols=paste0("POP_MUN_",pl), .fns = ~ .x, .names = "POP_REF"))
# Enregistrement de la base complète
bc %>% saveRDS(paste0(dir,"bases_communales/bc_",cog,"_popref.rds"))
# Enregistrement de la base simplifiée
bc %>% select(COM = DEPCOM) %>%
saveRDS(paste0(dir,"bases_communales/data_com_",cog,".rds"))
# Table de passage REFIGEO
tab_passage_2025 <- read.csv2("P:/GEOGRAPHIE/REFIGEO/2024/BASE/tab_passage_refigeo_2025.csv",
sep = ",",
fileEncoding = "UTF-8")
# Table de passage REFIGEO
tab_passage_2025 <- read.csv2("P:/GEOGRAPHIE/REFIGEO/2025/BASE/tab_passage_refigeo_2025.csv",
sep = ",",
fileEncoding = "UTF-8")
path <- paste0("P:/GEOGRAPHIE/REFIGEO/", cog, "/BASE/tab_passage_refigeo_", cog, ".csv")
# Table de passage REFIGEO
tab_passage_2025 <- read.csv2(path, sep = ",", fileEncoding = "UTF-8")
# Table de passage REFIGEO
tab_passage_new <- read.csv2(path, sep = ",", fileEncoding = "UTF-8")
# Codes manquants
tab_passage_new %>% filter(is.na(code_com_2024)) %>% View()
# Informations utiles pour gescodgeo :
tab_passage_new <- tab_passage_new %>%
# Uniquement les communes qui on subi une modification depuis 2008
filter(changement == 1 ) %>%
# Exclut Saint-Saint-Barthélemy et Saint-Martin (notés avec changement==1)
filter(!code_com_2007 %in% c("97123","97127")) %>%
# Uniquement les codes des communes après 2018
select(contains("code_com")) %>%
select(-contains("2003"), -contains("2004"),-contains("2005"),
-contains("2006"),-contains("2007"))
# Renommage
names(tab_passage_new) <- names(tab_passage_new) %>%
stringr::str_replace(pattern = "code_com_",replacement = "COM_")
# Retire les communes de Mayotte
tab_passage_new <- tab_passage_new %>%
filter(!COM_2023 %in% c("97601", "97602", "97603", "97604", "97605", "97606",
"97607", "97608", "97609", "97610", "97611", "97612",
"97613", "97614", "97615", "97616", "97617"))
# Dans la table de passage, 55298 devient 55138 dès 2014
tab_passage_new %>% filter(COM_2013 == "55298") %>%
select(COM_2013, COM_2014, COM_2015) %>% knitr::kable()
# # Dans la table de passage, 14697 devient 14472 dès 2015
tab_passage_new %>% filter(COM_2014 == "14697") %>%
select(COM_2014, COM_2015, COM_2016) %>% knitr::kable()
# Pour harmoniser avec les fichiers annuels du COG, décale ces changements d'1 an
tab_passage_new <- tab_passage_new %>%
mutate(COM_2014 = ifelse(COM_2014 == "55138", "55298", COM_2014),
COM_2015 = ifelse(COM_2015 == "14472", "14697", COM_2015))
# Nombre de ligne avant
tab_passage_new %>% nrow()
# Doublons
tab_passage_new[duplicated(tab_passage_new),]
# Supprime les doublons
tab_passage_new <- tab_passage_new[!duplicated(tab_passage_new),]
# # Nombre de ligne après
tab_passage_new %>% nrow()
data_table_passage <- tab_passage_new
# On recharge la population de référence pour chaque année jusqu'en 2023
for(cog in c(2008:cog)) {
bc <- readRDS(paste0(dir,"/bases_communales/bc_",cog,"_popref.rds"))
# COM_XXXX dans DEPCOM
data_table_passage <- data_table_passage %>% mutate(across(.cols=paste0("COM_",cog),
.fns = ~ .x,
.names = "DEPCOM"))
data_table_passage <- data_table_passage %>% left_join(
bc %>% select(DEPCOM, POP_REF),
by = "DEPCOM")
# @ Vérification
print(
paste0(
"COG ",cog, " : ", nrow(
filter(data_table_passage,is.na(POP_REF))
)
)
)
# POP_REF dans POP_GEO_XXXX
data_table_passage <- data_table_passage %>%
rename_with(.cols="POP_REF",.fn=~paste0("POP_GEO_",cog))
}
# Initialisation
library(dplyr)
# Chemin de data-raw
dir <- "U:/workspace/gescodgeo/data-raw/"
# Chemin des bases commuales sur P
dir_p <- "P:/PSAR_AT/ZONAGES/BasesCommunales/"
cog <- 2024
pl <- cog - 3
# Base communale
bc <- readRDS(paste0(dir_p,"an_",cog,"/bc_",cog,"_popleg",pl,".rds")) %>%
# Identifant DEPCOM + nom en majuscule
rename_with(.fn = toupper) %>%
# Population de référence
mutate(across(.cols=paste0("POP_MUN_",pl), .fns = ~ .x, .names = "POP_REF"))
# Enregistrement de la base complète
bc %>% saveRDS(paste0(dir,"bases_communales/bc_",cog,"_popref.rds"))
# Enregistrement de la base simplifiée
bc %>% select(COM = DEPCOM) %>%
saveRDS(paste0(dir,"bases_communales/data_com_",cog,".rds"))
# Chemin de data-raw
dir <- "U:/workspace/gescodgeo/data-raw/"
# Chemin des bases commuales sur P
dir_p <- "P:/PSAR_AT/ZONAGES/BasesCommunales/"
################################################################################
# Base intermédiaire : population légale en 2024
cog <- 2025
pl <- cog - 3
# Base communale
bc <- readRDS(paste0(dir_p,"an_",cog,"/bc_",cog,"_popleg",pl,".rds")) %>%
# Identifant DEPCOM + nom en majuscule
rename_with(.fn = toupper) %>%
# Population de référence
mutate(across(.cols=paste0("POP_MUN_",pl), .fns = ~ .x, .names = "POP_REF"))
# Enregistrement de la base complète
bc %>% saveRDS(paste0(dir,"bases_communales/bc_",cog,"_popref.rds"))
# Enregistrement de la base simplifiée
bc %>% select(COM = DEPCOM) %>%
saveRDS(paste0(dir,"bases_communales/data_com_",cog,".rds"))
################################################################################
# Table de passage 2008-2024
path <- paste0("P:/GEOGRAPHIE/REFIGEO/", cog, "/BASE/tab_passage_refigeo_", cog, ".csv")
# Table de passage REFIGEO
tab_passage_new <- read.csv2(path, sep = ",", fileEncoding = "UTF-8")
# Codes manquants
# tab_passage_new %>% filter(is.na(code_com_2024)) %>% View()
# Informations utiles pour gescodgeo :
tab_passage_new <- tab_passage_new %>%
# Uniquement les communes qui on subi une modification depuis 2008
filter(changement == 1 ) %>%
# Exclut Saint-Saint-Barthélemy et Saint-Martin (notés avec changement==1)
filter(!code_com_2007 %in% c("97123","97127")) %>%
# Uniquement les codes des communes après 2018
select(contains("code_com")) %>%
select(-contains("2003"), -contains("2004"),-contains("2005"),
-contains("2006"),-contains("2007"))
# Renommage
names(tab_passage_new) <- names(tab_passage_new) %>%
stringr::str_replace(pattern = "code_com_",replacement = "COM_")
##############################
# Vérification 2022 - 2023
# # Changements entre 2022 et 2023 (à la main)
# modifs_2023 <- data.frame(
#   COM_2023 = c("01138","01138","02564","02564","09056","09056","16206","16206",
#                "50272","50272","51457","51457","51457","71042","71042","85289",
#                "85289","85289","27676"),
#   COM_2022 = c("01039","01138","02077","02564","09056","09255","16140","16206",
#                "50015","50272","51063","51457","51637","71042","71492","85037",
#                "85053","85289","27058")
# )
#
# # Table de passage entre deux année à la façon de la fonction cog_transition()
# modifs_2023_bis <- tab_passage_new %>% distinct(COM_2022 , COM_2023) %>%
#
#   # Nombre de scissions
#   group_by(COM_2023) %>% mutate(NB_COM_INI = n()) %>% ungroup() %>%
#
#   # Nombre de fusions
#   group_by(COM_2022) %>% mutate(NB_COM_FIN = n()) %>% ungroup() %>%
#
#   # Au moins une modification
#   filter(NB_COM_INI + NB_COM_FIN  > 2 | COM_2022 != COM_2023) %>%
#   select(COM_2023, COM_2022)
#
#
# all.equal(
#   as.data.frame(modifs_2023) %>% arrange(COM_2022, COM_2023),
#   as.data.frame(modifs_2023_bis)  %>% arrange(COM_2022, COM_2023)
# )
################################################################################
# Mayotte n'est pas gérée dans la table de passage
# Retrouve les communes de Mayotte
# tab_passage_new %>% filter(is.na(COM_2008), !is.na(COM_2023)) %>% pull(COM_2023)
# Retire les communes de Mayotte
tab_passage_new <- tab_passage_new %>%
filter(!COM_2023 %in% c("97601", "97602", "97603", "97604", "97605", "97606",
"97607", "97608", "97609", "97610", "97611", "97612",
"97613", "97614", "97615", "97616", "97617"))
################################################################################
# Divergences entre la table de passage et les fichiers annuels du COG
# Dans la table de passage, 55298 devient 55138 dès 2014
tab_passage_new %>% filter(COM_2013 == "55298") %>%
select(COM_2013, COM_2014, COM_2015) %>% knitr::kable()
# |COM_2013 |COM_2014 |COM_2015 |
# |:--------|:--------|:--------|
# |55298    |55138    |55138    |
# |55298    |55298    |55298    |
# # Dans la table de passage, 14697 devient 14472 dès 2015
tab_passage_new %>% filter(COM_2014 == "14697") %>%
select(COM_2014, COM_2015, COM_2016) %>% knitr::kable()
# |COM_2014 |COM_2015 |COM_2016 |
# |:--------|:--------|:--------|
# |14697    |14472    |14472    |
# Pour harmoniser avec les fichiers annuels du COG, décale ces changements d'1 an
tab_passage_new <- tab_passage_new %>%
mutate(COM_2014 = ifelse(COM_2014 == "55138", "55298", COM_2014),
COM_2015 = ifelse(COM_2015 == "14472", "14697", COM_2015))
################################################################################
# Doublons
# Nombre de ligne avant
tab_passage_new %>% nrow()
# 2846
# Doublons
tab_passage_new[duplicated(tab_passage_new),]
#         COM_2024 COM_2023 COM_2022 COM_2021 COM_2020 COM_2019 COM_2018 COM_2017 COM_2016
# 1142    39367    39367    39367    39367    39367    39367    39367    39367    39367
# 1660    50216    50216    50216    50216    50216    50216    50216    50216    50216
# 2459    79013    79013    79013    79013    79013    79013    79013    79013    79013
# 2460    79013    79013    79013    79013    79013    79013    79013    79013    79013
# 2534    80369    80369    80369    80369    80369    80369    80369    80369    80369
# 2555    81132    81132    81132    81132    81132    81132    81132    81132    8113
# Supprime les doublons
tab_passage_new <- tab_passage_new[!duplicated(tab_passage_new),]
# # Nombre de ligne après
tab_passage_new %>% nrow()
# 2840
################################################################################
# Population légales
data_table_passage <- tab_passage_new
# On recharge la population de référence pour chaque année jusqu'en 2023
for(cog in c(2008:cog)) {
bc <- readRDS(paste0(dir,"/bases_communales/bc_",cog,"_popref.rds"))
# COM_XXXX dans DEPCOM
data_table_passage <- data_table_passage %>% mutate(across(.cols=paste0("COM_",cog),
.fns = ~ .x,
.names = "DEPCOM"))
data_table_passage <- data_table_passage %>% left_join(
bc %>% select(DEPCOM, POP_REF),
by = "DEPCOM")
# @ Vérification
print(
paste0(
"COG ",cog, " : ", nrow(
filter(data_table_passage,is.na(POP_REF))
)
)
)
# POP_REF dans POP_GEO_XXXX
data_table_passage <- data_table_passage %>%
rename_with(.cols="POP_REF",.fn=~paste0("POP_GEO_",cog))
}
data_table_passage <- data_table_passage %>% select( -DEPCOM)
data_table_passage_old <- readRDS(paste0(dir,"tables_de_passage/tp_2008-2024.rds"))
data_table_passage_old <- readRDS(paste0(dir,"tables_de_passage/tp_2008-",cog,".rds"))
data_table_passage_old <- gescodgeo:::data_table_passage
data_table_passage_old <- gescodgeo::data_table_passage
# Pas de divergences en dehors de la POP_GEO_2024
setdiff(data_table_passage %>% select(-POP_GEO_2024),
data_table_passage_old %>% select(-POP_GEO_2024))
# Pas de divergences en dehors de la POP_GEO_2024
setdiff(data_table_passage %>% select(-POP_GEO_2025),
data_table_passage_old %>% select(-POP_GEO_2025))
data_table_passage_old %>% select(-any_of(paste0("POP_GEO_",cog)))
data_table_passage_old %>% select(-any_of(paste0("POP_GEO_",cog))
# Pas de divergences en dehors de la POP_GEO_2024
pop_geo_cog <- paste0("POP_GEO_",cog)
# Pas de divergences en dehors de la POP_GEO_2024
pop_geo_cog <- paste0("POP_GEO_",cog)
setdiff(data_table_passage %>% select(-all_of(pop_geo_cog)),
data_table_passage_old %>% select(-all_of(pop_geo_cog)))
# Population modifiée pour 913 communes
setdiff(data_table_passage, data_table_passage_old) %>%
distinct(!!pop_geo_cog, !!com_cog) %>% nrow()
com_cog <-  paste0("COM_",cog)
# Population modifiée pour 913 communes
setdiff(data_table_passage, data_table_passage_old) %>%
distinct(!!pop_geo_cog, !!com_cog) %>% nrow()
# Population modifiée pour 913 communes
setdiff(data_table_passage, data_table_passage_old) %>%
distinct(.data[[pop_geo_cog]], .data[[com_cog]]) %>% nrow()
divergences <- data_table_passage %>%
distinct(.data[[pop_geo_cog]], .data[[com_cog]]) %>%
left_join(data_table_passage_old %>% distinct(.data[[pop_geo_cog]], .data[[com_cog]]),
by = com_cog)
View(divergences)
divergences <- data_table_passage %>%
distinct(.data[[com_cog]], .data[[pop_geo_cog]]) %>%
left_join(data_table_passage_old %>% distinct(.data[[pop_geo_cog]], .data[[com_cog]]),
by = com_cog)
View(divergences)
# Donnée du package
usethis::use_data(data_table_passage, overwrite = TRUE)
# Plus grande année disponible
cog_max <- cog
usethis::use_data(cog_max, overwrite = TRUE)
# Sauvegarde
saveRDS(data_table_passage,paste0(dir,"tables_de_passage/tp_2008-",cog,".1.rds"))
# Sauvegarde
saveRDS(data_table_passage,paste0(dir,"\archives-tables_de_passage/tp_2008-",cog,".1.rds"))
# Sauvegarde
saveRDS(data_table_passage,paste0(dir,"\archives-tables_de_passage/tp_2008-",cog,".1.rds"))
# Sauvegarde
saveRDS(data_table_passage,paste0(dir,"/archives-tables_de_passage/tp_2008-",cog,".1.rds"))
data_table_passage %>% filter(is.na(.data [[pop_geo_com]]))
data_table_passage %>% filter(is.na(.data[[pop_geo_com]]))
# Pas de divergences en dehors de la POP_GEO_2024
pop_geo_cog <- paste0("POP_GEO_",cog)
com_cog <-  paste0("COM_",cog)
data_table_passage %>% filter(is.na(.data[[pop_geo_com]]))
data_table_passage %>% filter(is.na(.data[[pop_geo_cog]]))
gescodgeo::cog_transition(2023,2024)
gescodgeo::cog_transition(cog-1,cog) %>%
setdiff(data_table_passage %>% select(-all_of(pop_geo_cog)),
data_table_passage_old %>% select(-all_of(pop_geo_cog)))
gescodgeo::cog_transition(cog-1,cog)
com_cog_n1 <-  paste0("COM_",cog-1)
transitition <- gescodgeo::cog_transition(cog-1,cog) %>%
left_join(data_table_passage, by = c("COM_INI"=com_cog_n1,"COG_FIN"=com_cog))
transitition <- gescodgeo::cog_transition(cog-1,cog) %>%
left_join(data_table_passage, by = c("COM_INI"=com_cog_n1,"COM_FIN"=com_cog))
View(transitition)
transitition <- gescodgeo::cog_transition(cog-1,cog) %>%
left_join(data_table_passage %>% select(all_of(com_cog_n_1,com_cog, pop_geo_cog)),
by = c("COM_INI"=com_cog_n1,"COM_FIN"=com_cog))
transitition <- gescodgeo::cog_transition(cog-1,cog) %>%
left_join(data_table_passage %>% select(all_of(c(com_cog_n_1,com_cog, pop_geo_cog))),
by = c("COM_INI"=com_cog_n1,"COM_FIN"=com_cog))
transitition <- gescodgeo::cog_transition(cog-1,cog) %>%
left_join(data_table_passage %>% select(all_of(c(com_cog_n1,com_cog, pop_geo_cog))),
by = c("COM_INI"=com_cog_n1,"COM_FIN"=com_cog))
View(transitition)
### pkgdown
library(pkgdown)
options(pkgdown.internet = FALSE)
# Mettre à jour l'index de la recherche
build_search()
build_home_index()
build_news()
